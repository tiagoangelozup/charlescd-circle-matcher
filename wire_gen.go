// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/google/wire"
	"github.com/tetratelabs/proxy-wasm-go-sdk/proxywasm/types"
	"github.com/tiagoangelozup/charlescd-circle-matcher/internal/config"
	"github.com/tiagoangelozup/charlescd-circle-matcher/internal/http"
	"github.com/tiagoangelozup/charlescd-circle-matcher/internal/logger"
	"github.com/tiagoangelozup/charlescd-circle-matcher/pkg/ring"
	"github.com/tiagoangelozup/charlescd-circle-matcher/pkg/router"
)

// Injectors from wire.go:

func newPluginContext(contextID uint32) types.PluginContext {
	factory := logger.NewFactory(contextID)
	mainPluginLogger := pluginLogger(factory)
	mainPlugin := newPlugin(mainPluginLogger)
	return mainPlugin
}

func newHttpContext(contextID uint32, rings []*config.Ring) types.HttpContext {
	factory := logger.NewFactory(contextID)
	serviceLogger := ringServiceLogger(factory)
	service := ring.NewService(serviceLogger, rings)
	jwt := router.NewJWT(service, factory)
	return jwt
}

// wire.go:

var providers = wire.NewSet(http.NewRequest, http.NewResponse, logger.NewFactory, newPlugin,
	pluginLogger, ring.NewService, ringServiceLogger, router.NewJWT, wire.Bind(new(router.RingService), new(*ring.Service)), wire.Bind(new(types.HttpContext), new(*router.JWT)), wire.Bind(new(types.PluginContext), new(*plugin)),
)

func ringServiceLogger(loggerFactory *logger.Factory) ring.ServiceLogger {
	return loggerFactory.GetLogger("charlescd.service")
}

func pluginLogger(loggerFactory *logger.Factory) PluginLogger {
	return loggerFactory.GetLogger("charlescd.plugin")
}
